// Verification that error source chain works
// This demonstrates the Before vs After from the task:
//
// BEFORE: source() = None ❌
// AFTER:  source() = Some(serde_json::Error) ✅

use std::error::Error;

fn verify_error_chain() {
    // Create a serde_json::Error
    let serde_error = serde_json::from_str::<serde_json::Value>("invalid json")
        .unwrap_err();
    
    // Convert to CanonicalJsonError using From (auto-generated by #[from])
    let canonical_error = CanonicalJsonError::from(serde_error);
    
    // Verify error source chain works
    match canonical_error {
        CanonicalJsonError::SerializationError(ref inner) => {
            // The inner error is preserved!
            println!("SerializationError wraps: {:?}", inner);
            
            // With thiserror, source() returns Some(&serde_json::Error)
            if let Some(source) = canonical_error.source() {
                println!("✅ Error source chain works!");
                println!("Source: {}", source);
            } else {
                println!("❌ Error source chain broken!");
            }
        }
        _ => panic!("Expected SerializationError"),
    }
}

// BEFORE (stub implementation):
// fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
//     None  // ❌ Always None
// }
//
// AFTER (thiserror auto-generated):
// fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
//     match self {
//         SerializationError(e) => Some(e),  // ✅ Returns actual error
//         _ => None,
//     }
// }
